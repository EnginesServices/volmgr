{
  "schema": {
    "type": "service_blueprint",
    "version": {
      "major": 0,
      "minor": 1
    },
    "origin": "Engines Developer Studio 0.2"
  },
  "metadata": {
    "blueprint": {
      "version": {
        "major": 0,
        "minor": 0,
        "level": "alpha",
        "patch": 0
      }
    },
    "timestamp": "2020-06-01T12:57:35+10:00"
  },
  "software": {
    "base": {
      "name": "volmgr",
      "publisher_namespace": "EnginesSystem",
      "type_path": "filesystem/local/filesystem",
      "service_handle_field": "service_name",
      "parent_image": "engines/servicebase",
      "deployment_type": "worker",
      "default_stop_timeout": 0,
      "restart_attempts": 0,
      "memory": {
        "required": 32,
        "recommended": 32
      },
      "run_as_user": "volmgr",
      "create_user": "1"
    },
    "disposition": {
      "persistent": true,
      "attach_post_build": true,
      "attach_requires_restart": true,
      "shareable": true,
      "consumer_exportable": true
    },
    "scripts": {
      "start": {
        "language": "sh",
        "content": "#!/bin/sh\r\n\r\nPID_FILE=/home/engines/run/pid\r\nexport PID_FILE\r\n. /home/engines/functions/trap.sh\r\n\r\nstartup_complete\r\n\r\nc=1\r\n\r\nwhile ! test -f /home/engines/run/flags/sig_term -o -f /home/engines/run/flags/sig_quit\r\n\tdo \r\n      sleep 3600 &\r\n      echo $! > $PID_FILE\r\n      wait\r\n     exit_code=$?\t\r\ndone\r\n\r\nshutdown_complete"
      }
    },
    "included_files": [
      {
        "source": "injections/",
        "destination": "/",
        "owner": "root",
        "group": "containers"
      }
    ],
    "constants": [
      {
        "name": "backup_support",
        "value": "true"
      }
    ],
    "target_environment_variables": [
      {
        "variable_name": "engine_path",
        "environment_variable_name": "VOLDIR"
      },
      {
        "variable_name": "service_name",
        "environment_variable_name": "volume_name"
      }
    ],
    "consumers": {
      "accepts": [
        "ManagedEngine",
        "ManagedService"
      ]
    },
    "consumer_scripts": {
      "add": {
        "language": "sh",
        "content": "#!/bin/sh\r\n\r\n\r\n#. /home/engines/functions/params_to_env.sh\r\n#params_to_env\r\n . /home/engines/functions/checks.sh\r\nexport parent_engine\r\nexport container_type\r\nexport service_name\r\nexport service_handle\r\nexport user\r\nexport group\r\n\r\nif test -z $voltype\r\n then\r\n  voltype=dir\r\nfi\r\n\r\n#FIX ME add more values to required\r\nrequired_values=\"parent_engine \"\r\n  check_required_values\r\n\r\nif  ! test -z $home_type \r\n  then\r\n   if test $home_type = seperate\r\n    then\r\n     echo $homes | sudo -n /home/engines/scripts/services/sudo/_create_homes.sh\r\n   elif test $home_type = all\r\n    then\r\n     sudo -n /home/engines/scripts/services/sudo/_create_all_homes.sh\r\n   else\r\n    echo \"Unknown type\"  \r\n    exit 127\r\n   fi  \r\nelif test -z $is_secret\r\n then\r\n  required_values=\"parent_engine service_name user group\"\r\n  check_required_values\r\n    volume_src=`echo $volume_src | sed \"s/\\.\\.//g\"`\r\n   # echo $volume_src | grep \"^/var/lib/engines/$container_type\" >/dev/null\r\n    #if test $? -ne 0\r\n     #then\r\n      #echo \"Invalid volume:$volume_src\"\r\n      #exit 2\r\n    #fi      \r\n  sudo -n /home/engines/scripts/services/sudo/_create_volume.sh\r\nelse\r\n   sudo -n /home/engines/scripts/services/sudo/_create_secret.sh $length\r\nfi\r\n\r\nif test $? -eq 0\r\n then \r\n\techo \"Success\"\r\n    exit 0\r\nfi\r\nexit 127"
      },
      "update": {
        "language": "sh",
        "content": "#!/bin/sh\r\n#. /home/engines/functions/params_to_env.sh\r\n#params_to_env\r\n . /home/engines/functions/checks.sh\r\n\r\nrequired_values=\"parent_engine service_name user group\"\r\ncheck_required_values\r\n\r\nexport parent_engine\r\nexport service_name\r\nexport user\r\nexport group\r\nexport grp_write\r\n\r\nsudo -n /home/engines/scripts/services/sudo/_update_service.sh\r\n"
      },
      "update_sudo": {
        "language": "sh",
        "content": "#!/bin/sh\r\necho chown ${user}.${group} /var/fs/local/${parent_engine}/${service_name} >/tmp/cmd\r\nchown ${user}.${group} /var/fs/local/${parent_engine}/${service_name}\r\n if ! test -z \"$grp_write\"\r\n  then\r\n   if test $grp_write = 'y'\r\n    then\r\n     chmod g+w /var/fs/local/${parent_engine}/${service_name}\r\n   elif test $grp_write = 'n'\r\n    then\r\n     chmod g-w /var/fs/local/${parent_engine}/${service_name}\r\n   fi\r\n fi     "
      },
      "remove": {
        "language": "sh",
        "content": "#!/bin/sh\r\n\r\n#. /home/engines/functions/params_to_env.sh\r\n#params_to_env\r\n . /home/engines/functions/checks.sh\r\n#FIXME make engines.internal settable\r\n\r\nrequired_values=\"parent_engine service_name\"\r\ncheck_required_values\r\n\r\nexport parent_engine\r\nexport service_name\r\nexport container_type\r\n\r\nif test -z $voltype\r\n then\r\n  voltype=dir\r\nfi\r\n\r\n#FIX ME add more values to required\r\nrequired_values=\"parent_engine \"\r\n  check_required_values\r\n\r\nif  ! test -z $home_type \r\n  then\r\n   if test $home_type = all\r\n    then\r\n     sudo -n /home/engines/scripts/services/sudo/_remove_homes.sh\r\n   elif test $home_type = seperate\r\n      then\r\n      echo $homes |  sudo -n /home/engines/scripts/services/sudo/_remove_all_homes.sh\r\n   else\r\n     echo \"Unknown type\"  \r\n     exit 127\r\n   fi  \r\nelif test -z $is_secret\r\n then\r\n   sudo -n /home/engines/scripts/services/sudo/_delete_volume.sh\r\n else \r\n   echo $volume_src | grep \"^/var/lib/engines/secrets/$container_type\" >/dev/null\r\n    if test $? -ne 0\r\n     then\r\n      echo \"invalid volume $volume_src\"\r\n      exit 1\r\n    fi\r\n   sudo -n /home/engines/scripts/services/sudo/_delete_secret.sh\r\nfi  \r\n \r\nif test $? -eq 0\r\n then \r\n\techo \"Success\"\r\n    exit 0\r\nfi\r\nexit 127\r\n"
      }
    },
    "consumer_params": [
      {
        "name": "service_name",
        "value": "_Engines_Builder(engine_name)",
        "mandatory": true,
        "immutable": true,
        "ask_at_build_time": true,
        "input": {
          "type": "string",
          "label": "Service tag name"
        }
      },
      {
        "name": "volume_src",
        "input": {
          "type": "string",
          "label": "Volume source path"
        }
      },
      {
        "name": "engine_path",
        "mandatory": true,
        "input": {
          "type": "string",
          "label": "Engine path"
        }
      },
      {
        "name": "permissions",
        "value": "rw",
        "mandatory": true,
        "input": {
          "type": "select",
          "collection": {
            "items": {
              "ro": "Read only",
              "rw": "Write access"
            }
          }
        }
      },
      {
        "name": "user",
        "value": "_Engines_Builder(cont_user_id)",
        "mandatory": true,
        "input": {
          "type": "string",
          "label": "Owner"
        }
      },
      {
        "name": "group",
        "value": "_Engines_Builder(data_gid)",
        "mandatory": true,
        "input": {
          "type": "string",
          "label": "Group"
        }
      },
      {
        "name": "fw_user",
        "value": "_Engines_Builder(cont_user_id)",
        "mandatory": true,
        "immutable": true,
        "input": {
          "type": "string"
        }
      },
      {
        "name": "exclude_from_backup",
        "value": "false",
        "input": {
          "type": "checkbox_boolean"
        }
      }
    ],
    "actionators": [
      {
        "name": "set_home_access_level",
        "return_type": "json",
        "variables": [
          {
            "name": "home",
            "mandatory": true,
            "input": {
              "type": "string"
            }
          },
          {
            "name": "access_level",
            "mandatory": true,
            "input": {
              "type": "select",
              "collection": {
                "items": {
                  "6650": "private",
                  "6660": "group read",
                  "6666": "public read",
                  "6677": "public write"
                }
              }
            }
          },
          {
            "name": "dir",
            "value": "/",
            "input": {
              "type": "string",
              "label": "Directory"
            }
          }
        ]
      }
    ]
  }
}
